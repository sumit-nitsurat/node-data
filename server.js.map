{"version":3,"sources":["server.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,2DAA2D;;AAE3D,OAAO,CAAC,0BAA0B,CAAC,CAAC;AACpC,MAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,MAAO,MAAM,WAAW,UAAU,CAAC,CAAC;AACpC,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,0BAAqB,uBAAuB,CAAC,CAAA;AAE7C,MAAY,IAAI,WAAM,mBAAmB,CAAC,CAAA;AAC1C,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC/E,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,IAAI,CAAC,cAAc,EAAE,CAAC;AAGtB,IAAI,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACxC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC;AAGvF,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AAEpB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AACpC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,GAAG,QAAQ,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAE9B,IAAI,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAChD,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAC5F,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC;IAC1B,QAAQ,EAAE,IAAI;CACjB,CAAC,CAAC,CAAC;AAEJ,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAC/B,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,gBAAM,CAAC,CAAC;AAGrB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AACpC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","file":"server.js","sourcesContent":["/// <reference path=\"node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\n/// <reference path=\"typings/linq/linq.3.0.3-Beta4.d.ts\" />\r\n\r\nrequire('reflect-metadata/reflect');\r\nimport http = require('http');\r\nimport Config = require('./config');\r\nvar express = require(\"express\");\r\nimport {router} from 'nodedata/core/exports';\r\n\r\nimport * as data from 'nodedata/mongoose';\r\nvar Main = require('nodedata/core')(Config, __dirname, data.entityServiceInst);\r\ndata.connect();\r\ndata.generateSchema();\r\n\r\n\r\nvar bodyParser = require(\"body-parser\");\r\nvar passport = require('passport'), LocalStrategy = require('passport-local').Strategy;\r\nimport * as config from './config';\r\n\r\nvar app = express();\r\n\r\napp.use(require('morgan')('combined'));\r\napp.use(require('cookie-parser')());\r\napp.set('views', __dirname + '/views');\r\napp.set('view engine', 'ejs');\r\n\r\nvar expressSession = require('express-session');\r\napp.use(expressSession({ secret: 'mySecretKey', resave: false, saveUninitialized: false }));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\n\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\napp.use(\"/\", router);\r\n\r\n\r\nvar server = http.createServer(app);\r\nserver.listen(9999);"],"sourceRoot":"/source/"}